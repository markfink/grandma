>>> from operator import itemgetter, concat
>>> import itertools as it
>>> from functools import partial
>>>
>>> dims = {'number': [1,2,3], 'letter': ['a', 'b'], 'special': ['+', '-']}
>>> dims
{'special': ['+', '-'], 'number': [1, 2, 3], 'letter': ['a', 'b']}
>>> def get_products(keys):
...     # helper to get products from keys in the following form:
...     # [('bold', True), ('color', 'black')]
...     values  = itemgetter(*keys)(dims)
...     product = it.product(*values)
...     return map(partial(zip, keys), product)
...     
>>> comb = it.combinations(dims, 2)
>>> comb_l = list(comb)
>>> comb_l
[('special', 'number'), ('special', 'letter'), ('number', 'letter')]
>>> res = map(get_products, comb_l)
>>> res
[[[('special', '+'), ('number', 1)], [('special', '+'), ('number', 2)], [('special', '+'), ('number', 3)], [('special', '-'), ('number', 1)], [('special', '-'), ('number', 2)], [('special', '-'), ('number', 3)]], [[('special', '+'), ('letter', 'a')], [('special', '+'), ('letter', 'b')], [('special', '-'), ('letter', 'a')], [('special', '-'), ('letter', 'b')]], [[('number', 1), ('letter', 'a')], [('number', 1), ('letter', 'b')], [('number', 2), ('letter', 'a')], [('number', 2), ('letter', 'b')], [('number', 3), ('letter', 'a')], [('number', 3), ('letter', 'b')]]]
>>> 
>>> from itertools import chain
>>> comb = it.combinations(dims, 2)
>>> l = chain.from_iterable(it.imap(get_products, comb))
>>> l.next()
[('special', '+'), ('number', 1)]
>>> l.next()
[('special', '+'), ('number', 2)]

